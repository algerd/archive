<?php
/*
 * Пример агреггации - контейнер-обработчик. 
 * Класс User описывает юзера - выдаёт все его свойства через методы без какой-либо их обработки, в девственном виде 
 * Классы Catalog и Authentification - обработчики объектов User. Они работают со свойствами и методами объектов класса User,
 * чтобы получить результаты в зависимости от поставленных задач, выраженных в классах-обработчиках.
 *  Это можно представить так. Есть класс Человек, объект которого Петя - помещаем в класс Трактор. Трактор с Петей пашет.
 * Потом Петю помещаем в класс Самолёт и Самолёт с Петей летит. Трактор и Самолёт - это контейнеры-обработчики. Они используют
 * свойства Пети, чтобы выполнить свои задачи Трактор-пахать, Самолёт-лететь.
 */
////////////////////////////////////////////////////////////////////////////////////////////////////
// Класс без обработчтков. Чистое описание.
class User
{
    private $name;
    private $role;
    private $password;
    public function __construct($n, $r, $p){ 
        $this->name = $n;
        $this->role = $r;
        $this->password = $p;
    }     
    public function getName(){return $this->name;}
    public function getRole(){return $this->role;}
    public function getPassword(){return $this->password;}
}
////////////////////////////////////////////////////////////////////////////////////////////////////
//                                  Обработчики
////////////////////////////////////////////////////////////////////////////////////////////////////                                  
// контейнер-обработчик1 объектов User. Он работает со свойствами и методами переданного объекта, как бы обрабатывает его чтобы выдать какие-то результаты
class Catalog
{
    private $user;    // свойство - объект класса User
    
    // инициализируем или агреггируем объект в контейнер
    // теперь все методы и свойства объекта DataBase будут доступны в классе Catalog
    public function __construct(User $obj){
        $this->user = $obj;
    }
    // вызываем метод-обработчик переданного объекта 
    public function getUser(){
        return $this->user->getName().'-'.$this->user->getRole();
    }
}
/*.................................................................................................*/
// контейнер-обработчик2 объектов User. Он работает со свойствами и методами переданного объекта, как бы обрабатывает его чтобы выдать какие-то результаты
class Authentification
{
    public $administration = no;    // индивидуальное свойство обработчика
    private $user;    // свойство - объект класса DataUser
    
    // инициализируем или агреггируем объект в контейнер
    // теперь все методы и свойства объекта DataBase будут доступны в классе Catalog
    public function __construct(User $obj){
        $this->user = $obj;
        // получаем индивидуальное свойство обработчика в зависимости от свойства переданного объекта
        if ($this->user->getRole() == 'admin') $this->administration = 'yes';
    }
    // вызываем метод-обработчик переданного объекта 
    public function getСheck(){
        if ($this->user->getName() == 'Alex' and $this->user->getPassword() == '1234') return 'Login';
        else return 'NotLogin';
    }
    // вызываем индивидауальный метод обработчика
    public function getAdministration(){
        return $this->administration;
    }
}

//////////////////////////// Используем обработчик Catalog ////////////////////////////////////////

$obj1 = new User('Alex', 'admin', 1234);
$obj2 = new User('John', 'guest', 5678);

// создаём контейнер $objCat1 и помещаем в него объект $obj1
$objCat1 = new Catalog($obj1);    // или $objCat1 = new Catalog(new User('Alex', 'admin', 1234));

// вызываем метод объекта $objCat1, в котором использовались методы и свойства объекта  $obj1
echo $objCat1->getUser().'<br>'; 

// создаём контейнер $objCat2 и помещаем в него объект $obj2
$objCat2 = new Catalog($obj2);    // или $objCat2 = new Catalog(new User('John', 'guest', 5678));
// вызываем метод объекта $objCat2, в котором использовались методы и свойства объекта  $obj2
echo $objCat2->getUser().'<br>';  

//////////////////////////// Используем обработчик Authentification ////////////////////////////////
// создаём контейнер $objAuth1 и помещаем в него объект $obj1
$objAuth1 = new Authentification($obj1);
// вызываем метод объекта $objAuth1, в котором использовались методы и свойства объекта  $obj1
echo $objAuth1->getСheck().'<br>';

// создаём контейнер $objAuth2 и помещаем в него объект $obj2
$objAuth2 = new Authentification($obj2);
// вызываем метод объекта $objAuth2, в котором использовались методы и свойства объекта  $obj2
echo $objAuth2->getСheck().'<br>';

echo '<hr>';
/////////////////////////// Использование двух обработчиков ////////////////////////////////////////
echo $objCat1->getUser().' / '.$objAuth1->getСheck().' / Administration: '.$objAuth1->getAdministration().'<br>';
echo $objCat2->getUser().' / '.$objAuth2->getСheck().' / Administration: '.$objAuth2->getAdministration().'<br>';
?>