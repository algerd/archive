  
Creational Patterns - Порождающие шаблоны проектирования предназначены для создания объектов,
позволяя системе оставаться независимой как от самого процесса создания, так и от типов создаваемых объектов.


Singleton - шаблон, реализующий создание единственного объекта изнутри класса, который фактически принадлежит этому классу и имеет следующие особенности:
    - объект должен быть доступен для любого объекта в системе (реализовано через static)
    - объект не должен сохраняться в глобальной переменной (он хранится закрытом static свойстве класса)
    - в системе не должно быть больше одного объекта данного класса 

Factory Method - Предоставляет интерфейс для создания объекта какого-то одного семейства. 

    Parameter Factory Method - это один фабричный метод с условием (switch), в котором в зависимости от передаваемого в метод параметра
        создаётся соответствующий класс. Он отличается простотой исполнения, но использование switch для создания объектов нарушает принцип ооп-полиморфизма(разделение).
        Такой вариант эффективен при создании простых фабрик без дальнейшего их развития и расширения.

    Classic Factory Method - предусматривает разделение фабричных методов по отдельным классам , что соответствует принципам полиморфизма в ооп.
        Несмотря на его большую сложность и кажущуюся громоздкость, он обеспечивает гибкость кода, его читабельность и лёгкость модификации. 
        Этот шаблон - один из главных шаблонов при рефакторинге кода.
        Classic Factory Method используют в Abstract Factory, где надо создавать объекты от классов разных семейств.  

Abstract Factory - Предоставляет интерфейс для создания семейств! взаимосвязанных или взаимозависимых объектов.
    Он основан на использовании Classic Factory Method для семейств классов. Фабричные методы группируются в фабричные классы, соответствующие семейству классов-чертежей объектов.
    Структура фабричных классов (перечень фабричных методов) задаётся абстрактной фабрикой Abstract Factory.
    Абстрактная фабрика хорошо встраивается в другие паттерны, когда требуется создание объектов семейств классов, напр. в Builder или Factory of Prototypes.

Prototype - шаблон создания клона объекта. Это простое клонирование объекта в PHP.
    Он получил развитие в шаблоне Factory of Prototypes.

    Factory of Prototypes - это фабрика прототипов(клонов) объектов какого-то набора классов. 
        Причём в отличие от Abstract Factory, классы могут быть никак не связаны между собой.
        Этот шаблон можно использовать как хранилище образцов неизменяемых объектов.

Builder - важнейший патерн!!!!. Builder следует логике последовательного создания объекта, выделяя в ней 3 функциональные части по принципу строительства объекта из реальной жизни:
    - есть класс - чертёж объекта. Он состоит из свойств и методов работы с ними.
    - eсть строитель (Builder), обеспечивающий весь функционал по созданию объекта и наполнению его свойствами - фактически это Factory Method или для семейств - Abstract Factory
    - есть директор (Director), который запускает создание объекта и наполнение его свойствами и возвращает построенный объект.
    Благодаря такому разделению можно создать несколько разных билдеров для класса, которые наделят объекты одного класса разными свойствами.
    С билдером код выглядит понятнее и последовательнее, его легче проектировать и тестировать. Плата за это - код удлинняется,   
    но это мелочь по сравнению с плюсами.
    Builder - мегаполезный и мега важный шаблон!!! Это скелет фактически любого проекта на ООП!