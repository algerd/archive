<?php
/*
Заместитель (англ. Proxy) — структурный шаблон проектирования, который предоставляет объект,
который контролирует доступ к другому объекту, перехватывая все вызовы (выполняет функцию контейнера).
	Proxy - заместитель , хранит ссылку, которая позволяет заместителю обратиться к реальному субъекту.
Объект класса "MathProxy" предоставляет интерфейс, идентичный интерфейсу "IMath",
так что заместитель всегда может быть предоставлен вместо реального субъекта;
контролирует доступ к реальному субъекту и может отвечать за его создание и удаление.
Прочие обязанности зависят от вида заместителя:
	- удаленный заместитель отвечает за кодирование запроса и его аргументов
		и отправление закодированного запроса реальному субъекту в другом адресном пространстве;
	- виртуальный заместитель может кэшировать дополнительную информацию
		о реальном субъекте, чтобы отложить его создание.
	- защищающий заместитель проверяет, имеет ли вызывающий объект необходимые для выполнения запроса права;
*/

// Subject - субъект
// определяет общий для Math и "Proxy" интерфейс, так что класс "Proxy" можно использовать везде, где ожидается
interface IMath {
    function Add($x, $y);
    function Sub($x, $y);
    function Mul($x, $y);
    function Div($x, $y);
}

// RealSubject - реальный объект, определяет реальный объект, представленный заместителем
class Math implements IMath {
    public function __construct() {
        echo "Create object Math.<br>";
    }
    function  Add( $x, $y ) { return $x + $y; }
    function  Sub( $x, $y ) { return $x - $y; }
    function  Mul( $x, $y ) { return $x * $y; }
    function  Div( $x, $y ) { return $x / $y; }
}

// Proxy-заместитель:
class MathProxy implements IMath {
    protected $math = null;		// ссылка на реальный объект

    /// Быстрые операции - не требуют реального субъекта
    function Add( $x, $y ) { return $x + $y; }
    function Sub( $x, $y ) { return $x - $y; }

    /// Медленные операции - требуют создания реального субъекта
    function Mul( $x, $y ) {
		if ( $this->math == null ) $this->math = new Math();
		return $this->math->Mul($x, $y);
    }
    function Div( $x, $y ) {
      if ( $this->math == null ) $this->math = new Math();
      return $this->math->Div($x, $y);
    }
}



$p = new MathProxy;

// Do the math
echo "4 + 2 = ".$p->Add(4, 2).'<br>';
echo "4 - 2 = ".$p->Sub(4, 2).'<br>';
echo "4 * 2 = ".$p->Mul(4, 2).'<br>';	// будет вызван объект класса Math
echo "4 / 2 = ".$p->Div(4, 2).'<br>';	// будет вызван объект класса Math
?>
