
Структурные паттерны рассматривают вопросы о компоновке системы на основе классов и объектов. При этом могут использоваться следующие механизмы:

    - Наследование, когда базовый класс определяет интерфейс, а подклассы - реализацию. Структуры на основе наследования получаются статичными и редко используются.
    - Композиция (DI-Composition), когда структуры строятся путем объединения объектов некоторых классов. Композиция позволяет получать структуры, которые можно изменять во время выполнения.

Adapter - представляет собой программную обертку над уже существующими классами и 
    предназначен для преобразования их интерфейсов к виду, пригодному для последующего использования в новом программном проекте.

Bridge - отделяет абстракцию от реализации так, что то и другое можно изменять независимо.

Composite - группирует схожие объекты в древовидные структуры. 
    Рассматривает единообразно простые и сложные объекты.

Decorator - используется для расширения функциональности объектов. 
    Являясь гибкой альтернативой порождению классов, паттерн Decorator динамически добавляет объекту новые обязанности.

Facade - предоставляет высокоуровневый унифицированный интерфейс к набору интерфейсов некоторой подсистемы, что облегчает ее использование.

Flyweight - использует разделение для эффективной поддержки множества объектов.

Proxy - замещает другой объект для контроля доступа к нему.
