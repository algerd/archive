<?php
/*
 * Ошибки работы с бд отлавливаются с помощью методов PDO errorCode() и errorInfo().
 * Но этот способ имеет недостатки (не отлавливает ошибки PDOStatement), поэтому рекомендуется отлавливать ошибки с помощью PDOException,
 * который предоставляет те же методы отлавливания ошибок плюс PDOStatement::errorCode() и PDOStatement::errorInfo().
 * Чтобы заставить PDO использовать PDOException, надо прописать аттрибут соединения:
 *  - setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION)
 *  - или в массиве опций соединения new PDO(,,,[PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION]);
 */
/* 
 * mixed PDO::errorCode() - Возвращает код SQLSTATE результата последней операции с базой данных
 * mixed PDOException::getCode() - также отлавливает PDOStatement::errorCode()
 * 
 * Возвращает SQLSTATE - пятисимвольный идентификатор, определенный в стандарте ANSI SQL-92. 
 * Первые два символа SQLSTATE отвечают за класс ошибки, а следующие три определяют ее подкласс. 
 * Класс ошибок 01 означает предупреждение, которому сопутствует возвращаемый код SQL_SUCCESS_WITH_INFO. 
 * Классы отличные от 01, за исключением 'IM', означают ошибки выполнения запросов к базе данных. 
 * Класс 'IM' свидетельствует об ошибках и предупреждениях, которые вызваны самой реализацией PDO (или, возможно, ODBC, если используется ODBC драйвер). 
 * Значение подкласса '000' в любом классе означает, что подкласс для этого SQLSTATE отсутствует.
 *
 * PDO::errorCode() выдает код ошибки только для операций совершаемых с базой данных напрямую из PDO. 
 * Если создать объект PDOStatement методами PDO::prepare() или PDO::query(), и вызвать ошибку его методами, PDO::errorCode() эту ошибку не отобразит. 
 * В таких случаях нужно пользоваться собственными методами получения кодов ошибок объекта PDOStatement PDOStatement::errorCode().
 *
 * Возвращает NULL, если никаких операций над базой данных средствами PDO объекта не производилось.
 */

/*
 * array PDO::errorInfo() - Возвращает массив с информацией об ошибке
 * array PDOException::errorInfo - public свойство (отлавливает PDOStatement::errorInfo())
 * 
 * Возвращает массив с информацией об ошибке произошедшей в ходе выполнения последней операции с базой данных. Массив содержит следующие поля:
 *   0	Код ошибки SQLSTATE (пятисимвольный идентификатор определенный в стандарте ANSI SQL).
 *   1	Код ошибки, заданный драйвером.
 *   2	Выданное драйвером сообщение об ошибке.
 * PDO::errorInfo() выдает информацию об ошибке только для операций совершаемых с базой данных напрямую из PDO. 
 * Если создать объект PDOStatement методами PDO::prepare() или PDO::query(), и вызвать ошибку его методами, PDO::errorInfo() эту ошибку не отобразит. 
 * В таких случаях нужно пользоваться собственными методами получения информации об ошибках объекта PDOStatement:  PDOStatement::errorInfo().
 */

try {
    // Проверка подключения php-расширения нужного драйвера
    if ( !in_array('mysql', PDO::getAvailableDrivers()) ) 
        throw new Exception ('Требуется подключение расширения php_pdo_mysql.dll');
    
    // Создадим БД 'test'
    $db = new PDO('mysql:host=localhost;', 'root');
    $db->setAttribute(PDO::ATTR_ERRMODE, PDO::ERRMODE_EXCEPTION);
    $db->exec("DROP DATABASE IF EXISTS test");
    $db->exec("CREATE DATABASE test CHARACTER SET utf8 COLLATE utf8_general_ci");
    
    // делаем ошибку
    //$db->query('DELECT name FROM people');   
}
catch (PDOException $e) {
    echo 'Cообшение исключения: '.$e->getMessage().'<br>';
    echo 'Код исключения: '.$e->getCode().'<br>';
    echo 'Файл, где выброшено исключение: '.$e->getFile().'<br>';
    echo 'Строка, выбросившая исключениe: '.$e->getLine().'<br>';
    echo '<pre>';
    print_r($e->errorInfo);
}
catch (Exception $e) {
    echo $e->getMessage().'<br>';   
}


/*
 * try-catch PDOException рекомендуется применять для всех операций работы с PDO, 
 * централизованно отлавливая исключения, а не в каждый запрос по отдельности. 
 * Ошибки следует отлавливать в логи, а на экран выводить только ту информацию, которая будет безопасна.
 * Встроенный в php ловец исключений выдаст на экран полный комплект небезопасной для посторонних инфы, поэтому
 * исключения желательно отлавливать
 */
// делаем ошибку без try-catch
//$db->query('DELECT name FROM people');