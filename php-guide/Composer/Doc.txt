

Для чего нужен Composer: 
1. для автозагрузки классов, пространств имён, функций, файлов и архивов из проекта.
2. для загрузки и обновления внешних модудей в проекте.

Установка Composer в проект (в какой-то модуль):

Сначала надо установить Composer в корень php. Для Windows это делается простым установщиком.
В OpenServer Composer установлен сразу.

1. Перейти в папку с проектом (модулем)
2. Ввести: 

	I:\OpenServer\domains\test.loc>composer init
	
3. Заполнить поля в composer.json:	
 
    Package name (<vendor>/<name>) [Alex/test.loc]: test.loc/test-composer                                                                                                                                                                                                                              
		The package name should be lowercase and have a vendor name, a forward slash, 
		and a package name, matching: [a-z0-9_.-]+/[a-z0-9_.-]+                                                                                                                  
	Description []: test composer
	Author: John Smith <john@example.com>
		Must be in the format: John Smith <john@example.com> 
	Minimum Stability []: 	                                                                                                
	License []:                                                                                                                                                                                                                                  
	Define your dependencies. (подключение внешних модулей)                                                                                                                                                                                                                       
	Would you like to define your dependencies (require) interactively [yes]? no                                            
	Would you like to define your dev dependencies (require-dev) interactively [yes]? no                                    
      
	Получим в проекте composer.json такого вида:
		{                                                                                                                       
			"name": "test.loc/test-composer",                                                                                   
			"description": "test composer",                                                                                     
			"authors": [                                                                                                        
				{                                                                                                               
					"name": "John Smith",                                                                                       
					"email": "john@example.com"                                                                                 
				}                                                                                                               
			],                                                                                                                  
			"require": {}                                                                                                       
		}  
		
4. Далее необходимо установить сам Composer в проект, чтобы получить возможность пользоваться его автозагрузчиком классов. 
	Для этого необходимо выполнить следующую команду:

    I:\OpenServer\domains\test.loc>composer install

	Таким образом Composer подтянет все зависимости, указанные в проекте (в данном случае ничего, т.к. секция require в composer.json пустая) и установит сам Composer как стороннюю библиотеку в проект. 
	По умолчанию это папка vendor в корне проекта.


5. Autoload:

1) PSR-0 - Данный ключ позволяет нам обозначать корневые директории для неймспейсов.
    Названия пространств имён и папок в php-файлах и в composer.json - регистронезависимы!
    Поэтому папки и файлы можно называть с маленьких букв, а пространства имён с больших.

        "autoload": {
            "psr-0": {
                "Main\\": "src/controller",
                "Model\\":"src/"
            }
        }
    Эта запись значит:
        Неймспейс Main лежит в директории src/controller/main относительно папки в которой находится composer.json (у нас это папка Composer)
        Неймспейс Model лежит в директории src/model относительно папки в которой находится composer.json
        
    Теперь необходимо выполнить команду: composer install
    Благодаря ней обновится автогенерирующийся файл vendor/composer/autoload_namespaces.php, в котором будет php код для регистрации psr-0 классов:
  
        $vendorDir = dirname(dirname(__FILE__));
        $baseDir = dirname($vendorDir);
        return array(
            'Model\\' => array($baseDir . '/src'),
            'Main\\' => array($baseDir . '/src/controller'),
        );    

    Также для одного неймспейса можно задать более одной корневой папки:
        "autoload": {
            "psr-0": {
                "Model\\": ["src/", "src2/", "src3/"]
            }
        }    
    И тогда класс из неймспеса Model будет по очереди искаться в директориях src/model/,  src2/model/ и src3/model/   

    Плюсы PSR-0: нет необходимости перегенерировать автолоадер (обновлять composer) при добавлении классов в уже прописанные неймспейсы

    !!! Рекомендуется вместо psr-0 использовать psr-4, который предоставляет те же функции что и psr-0, но указывает путь более детально

1.1) PSR-4 - аналог PSR-0, в котором директорию пространства имён надо прописывать явно:
        "autoload": {
            "psr-4": {
                "Main\\": "src/controller/main",
                "Model\\":"src/model"
            }
        }
        
    Автогенерирующий файл  vendor/composer/autoload_psr4.php:   

        $vendorDir = dirname(dirname(__FILE__));
        $baseDir = dirname($vendorDir);
        return array(
            'Model\\' => array($baseDir . '/src/model'),
            'Main\\' => array($baseDir . '/src/controller/main'),
        );


2) Classmap - позволяет автозагрузчику работать с классами, не следующими PSR-0 соглашению:
        
        "classmap": ["classes/"]

    Composer пропишет карту классов в файле vendor/composer/autoload_classmap.php:

        $vendorDir = dirname(dirname(__FILE__));
        $baseDir = dirname($vendorDir);
        return array(
            'Moder' => $baseDir . '/classes/moder.php',
        );

    Как происходит этот процесс добавления? Каждый раз, когда мы запускаем команду composer install или composer update, 
    то Composer обращается к ключу classmap и сканирует все папки на наличие файлов с расширениями .php и .inc и ищет в них классы, 
    параллельно заполняя саму карту в файле vendor/composer/autoload_classmap.php     

    Плюсы: позволяет работать с библиотеками и классами, не следующими psr-0 соглашению (без пространств имён)
    Минусы: необходима повторная генерация автолоад файла(обновлять composer) при добавлении каждого класса
   

3) Files - осуществляет загрузку функций из файлов:

        "files": ["functions/show.php", "functions/name.php"]

    Composer пропишет загрузку файлов в файле vendor/composer/autoload_files.php:

        $vendorDir = dirname(dirname(__FILE__));
        $baseDir = dirname($vendorDir);
        return array(
            $baseDir . '/functions/show.php',
            $baseDir . '/functions/name.php',
        );



6. Проверка на ошибки и несоответствия спецификациям файла composer.json:
    I:\OpenServer\domains\test.loc>composer validate


