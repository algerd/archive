
Все классы для работы с файловой системой (File Handling) являюися порождающими итераторами (SplFileInfo через метод openFile()) и 
для более детальной работы с ними как с итераторами (рекурсивный перебор, фильтрация, ограничение и т.д.) надо использовать 
соответствующие итерирующие итераторы (см. папку Iterators)

SplFileInfo - это главный информационный класс о файле. От него расширяются все остальные файлавые классы.
    Если требуются методы работы над файлом как над объектом (чтение, запись и т.д.),
    то надо создать объект с помощью метода SplFileInfo::openFile(), но лучше создавать объект напрямую через new SplFileObject().

SplFileObject - предоставляет объектно-ориентированный интерфейс для работы с файлом. Он работает с файлом построчно.
    Он имеет полный функционал работы с файлами и наследует информационный интерфейс от родителя SplFileInfo.
    Кроме того, он имеет переопределённые методы интерфейсов Iterator, что делает  
    возможным работу с ним как с итератором. По сути он представляет собой ArrayIterator, который 
    может работать с итерирующими итераторами.

DirectoryIterator - предоставляет простой интерфейс для просмотра содержимого каталогов файловой системы (для работы с директорией).  
    Он унаследовал все методы SplFileInfo, но применительно к директории.   
    Благодаря наследованию от Iterator, DirectoryIterator представляет собой полноценный итератор (подобно ArrayIterator), но 
    применительно к файлам директории как элементам массива. И ему доступны все расширения одномерный итерирующих итераторов.

FilesystemIterator - итератор файловой системы. Он расширяет итератор директории DirectoryIteratory, добавляя
    возможность более тонко настроить методы key()=>current() - возвращение нужного элемента итерации в зависимости от флага (DirectoryIterator возвращал
    только текущий элемент итератора DirectoryIterator). В остальном это полный аналог итератора DirectoryIteratory

GlobIterator - ищет все пути относительно глобального, совпадающие с шаблоном pattern.
    формирует на основе найденных результатов итератор типа ArrayIterator согласно правилам, указанным в флагах.

RecursiveDirectoryIterator - предоставляет интерфейс для рекурсивного перебора каталогов файловой системы. В отличие от DirectoryIterator он 
    вобрал в себя методы тонкой работы класса FilesystemIterator по возвращению требуемого результата от key()=>current() в зависимости от флага. 
    RecursiveDirectoryIterator - рекурсивный итератор директории по аналогии с RecursiveArrayIterator и работать с ним надо соответ-
    ствующими рекурсивными итерирующими итераторами (напр. RecursiveIteratorIterator)