<?php

/*
В PHP используется встроенный класс Closure - это чертёж или конструктор для создания анонимных функций.
Класс Closure имеет магический метод __invoke(), с помощью которого к объектам класса Closure можно обращаться 
как к функциям. При этом автоматически будет вызываться метод __invoke(): */
 
$objClosure = new Closure(); 
$objClosure($x); //    <--->  $objClosure->__invoke($x);
/*
Объект $objClosure есть ни что иное как анонимная функция или объект Closure анонимной функции.
И наоборот, анонимная функция - это объект класса Closure!!!  */ 
 
// Записи инициализации анонимной функции равносильны созданию нового объекта:  
function($x){};  //       <--->    new Closure()
$fun = function($x){}; // <--->    $fun = new Closure()
 
// Записи обращения равносильны вызову метода объекта:
function f(){return function($x){return $x;};}//  <--->   function f(){return new Closure($x)}
$d = f();      // объект                          <--->   $d = new Closure;
$res = $d(10); // вернёт 10                       <--->   $res = $d->__invoke($x)

// Поэтому вызывать анонимную функцию можно через __invoke:

$res = f()->__invoke(10);// вернёт 10              <--->  $res = $objClosure->__invoke($x)
 
// Передача анонимной функции в аргумент простой функции(метода) равносилен передаче объекта класса Closure:

function foo($a){    //                             <---> function foo(Closure $a){ 
    $c = $a() + 5;   //                             <--->     $c = $a->__invoke() + 5
    return $c;       //                             <--->     return $c;
}                    //                                   }
foo(function(){return 5;}); // вернёт 10            <--->  foo(new Closure());

// Поэтому при передаче анонимной функции в аргументе можно (и нужно) указывать тип Closure:

function foo2(Closure $a){/*....*/};

// Иногда указывают тип callback (или синоним callable), но это неправильно, потому что анонимные функции имеют свой явный тип - класс Closure
// Однако анонимные функции можно исползовать в аргументах, где прописан тип передаваемой переменной callback (или синоним callable)!

?>